-- Triggers o desencadenadores, es un procedimiento almacenado
-- que se ejecuta automaticamente cuando se produce un evento 
-- en el servidor. 3 tipos de Triggers DML, DDL y logon
-- Los DML son triggers que se ejecutan mediante las instrucciones
-- insert into, update o delete.
-- Los DDL son triggers que se ejecutan mediante las instrucciones
-- create, alter o drop
-- Las logon son triggers que se ejecutan cuando se inicia la 
-- sesión del servidor o de una instancia
USE Neptuno;
GO
-- CREAR TABLA Facturas
CREATE TABLE Facturas (
	IdFactura INT PRIMARY KEY IDENTITY(1,1),
	Cliente VARCHAR(100),
	Importe DECIMAL(12,2)
);
PRINT 'TABLA FACTURAS CREADA CON ÉXITO'
-- CREAR TABLA Registro
CREATE TABLE Registro (
	Idregistro INT PRIMARY KEY IDENTITY(1,1),
	Fecha DATE,
	Descripcion VARCHAR(100),
	Usuario VARCHAR(50)
);
PRINT 'TABLA REGISTRO CREADA CON ÉXITO'
-- CREACIÓN DEL TRIGGER
CREATE TRIGGER TFacturas
ON Facturas FOR INSERT
AS
BEGIN
	-- SUMAR 100 AL IMPORTE
	UPDATE F
	SET F.Importe = F.Importe + 100 
	FROM Facturas F
	INNER JOIN inserted I ON F.IdFactura = I.IdFactura;
END;
GO
-- INSERTAR UN REGISTRO EN LA TABLA FACTURAS
INSERT INTO Facturas(Cliente, Importe)
VALUES ('Cliente 3',2834);

-- CUANDO INSERTES UN REGISTRO EN LA TABLA FACTURAS, QUIERO
-- QUE ME INSERTES UN REGISTRO EN LA TABLA REGISTRO
CREATE TRIGGER TFACTURASI
ON Facturas FOR INSERT
AS
BEGIN
	INSERT INTO Registro(Fecha,Descripcion,Usuario)
	-- LA FECHA DEL SISTEMA GETDATE()
	-- EL USUARIO CON EL QUE HEMOS HECHO LOGON USER
	VALUES(GETDATE(),'Alta de factura', USER_NAME)
END;
GO

-- GENERAR EL NUMERO DE FACTURA DE MANERA AUTOMATICA CON UN
-- TRIGGER
CREATE TRIGGER NUMERO_FACTURA
ON Facturas FOR INSERT
AS
BEGIN
	-- GENERAR EL NUMERO DE FACTURA
	UPDATE F
	SET F.Numero_Factura = CONCAT(F.IdFactura,'/',YEAR(GETDATE()))
	FROM Facturas F
	INNER JOIN inserted I ON F.IdFactura = I.IdFactura;
END;
GO
-- update sirve para actualizar uno o varios registros 
-- de una tabla
UPDATE Clientes
SET CódPostal = 'Alem',
	Región = 'Alem'
WHERE País = 'Alemania';
-- NO HAY NINGUN FILTRO

-- MODIFICAR UN TRIGGER
ALTER TRIGGER NUMERO_FACTURA
ON Facturas FOR INSERT
AS
BEGIN
	-- GENERAR EL NUMERO DE FACTURA
	UPDATE F
	SET F.Numero_Factura = CONCAT(F.IdFactura,'/',YEAR(GETDATE())),
		F.Cliente = 'CLI'+F.Cliente
	FROM Facturas F
	INNER JOIN inserted I ON F.IdFactura = I.IdFactura;
END;
GO

-- COMO ELIMINAR UN TRIGGER, CON DROP
DROP TRIGGER TFacturas;
GO
PRINT 'ELIMINADO'

-- CREAR UN TRIGGER CUANDO SE MODIFICA UN REGISTRO
CREATE TRIGGER MFacturas
ON FACTURAS 
AFTER UPDATE
AS 
BEGIN 
	-- RESTAR 20 AL IMPORTE
	UPDATE F
	SET F.Importe = F.Importe - 20 
	FROM Facturas F
	INNER JOIN inserted I ON F.IdFactura = I.IdFactura;
END;
GO

-- MODIFICAR + MOSTRAR
UPDATE Facturas
SET Importe = Importe + 5
WHERE IdFactura = 4;
--
SELECT * FROM Facturas

-- CREAR UN TRIGGER QUE SE DISPARE AL ELIMINAR UN REGISTRO
CREATE TRIGGER REGISTRO_ELIMINADO
ON Facturas FOR DELETE
AS
BEGIN
	INSERT INTO Registro(Fecha,Descripcion,Usuario)
	-- LA FECHA DEL SISTEMA GETDATE()
	-- EL USUARIO CON EL QUE HEMOS HECHO LOGON USER
	SELECT GETDATE(),'Factura eliminada'+': '+deleted.Numero_Factura, CURRENT_USER
	FROM deleted
END;
GO
-- ELIMINAR EL IdFactura 3
DELETE FROM Facturas
WHERE IdFactura = 6;

Select *, GETDATE() AS FECHA, 'nOMBRE' FROM Facturas;

-- MODIFICAR EL TRIGGER, CON LA SOLUCION DEL DELETED
-- TABLA TEMPORAL QUE ALMACENA EL REGISTRO ELIMINADO
-- CONTIENE TODOS LOS CAMPOS
ALTER TRIGGER REGISTRO_ELIMINADO
ON Facturas FOR DELETE
AS
BEGIN
	INSERT INTO Registro(Fecha,Descripcion,Usuario)
	-- LA FECHA DEL SISTEMA GETDATE()
	-- EL USUARIO CON EL QUE HEMOS HECHO LOGON USER
	SELECT GETDATE(),'Factura eliminada: '+deleted.Numero_Factura, CURRENT_USER
	FROM deleted
END;
GO

-- VARIABLES, OBJETOS QUE ALMACENAN TEMPORALMENTE UN VALOR
-- VARIABLES TENEMOS DE 2 TIPOS, LAS GLOBALES, LAS PERSONALIZADAS
SELECT @@VERSION;
-- LA VERSIÓN QUE TENEMOS INSTALADA EN NUESTRA MAQUINA
SELECT @@MAX_CONNECTIONS;
-- EL NUMERO MAXIMO DE CONE

-- DECLARAR LAS VARIABLES
DECLARE @Nombre VARCHAR(100);
DECLARE @Pais VARCHAR(100);
DECLARE @Ciudad VARCHAR(100);
-- ASIGNAR VALORES A LAS VARIABLES, MEDIANTE SET
SET @Nombre = 'Juan Perez';
SET @Ciudad = 'Barcelona';
SET @Pais = 'Spain';
-- VAMOS A INSERTAR UN REGISTRO EN LA TABLA CLIENTES
INSERT INTO Clientes (NombreCompania, Ciudad, País)
VALUES (@Nombre, @Ciudad, @Pais)
-- LO VISUALIZAREMOS
SELECT * FROM Clientes WHERE NombreCompania = @Nombre;

-- STORE PROCEDURES (PROCEDIMIENTO ALMACENADO DE SQL SERVER)
-- UN CONJUNTO DE INSTRUCCIONES TRANSACT-SQL
-- ACEPTA PARAMETROS DE ENTRADA Y PUEDE DEVOLVER PARAMETROS
-- DE SALIDA, PUEDE LLAMAR A OTROS PROCEDIMIENTOS STORE
-- PROCEDURES.
-- VENTAJAS DE TRABAJAR CON SP. TRAFICO DE RED REDUCIDO,
-- LOS COMANDOS SE EJECUTAN EN UN SOLO LOTE, REDUCE 
-- EL TRAFICO ENTRE CLIENTE-SERVIDOR
-- MAYOR SEGURIDAD
-- LO PUEDEN USAR CUALQUIER USUARIO, REUTILIZAR CODIGO,
-- MANTENIMIENTO MAS FACIL
-- CREAR UN SP
CREATE PROCEDURE spinsertarfactura
	@Cliente VARCHAR(100),
	@Importe DECIMAL(18,2),
	@Numero VARCHAR(10)
AS
BEGIN 
	INSERT INTO Facturas(Cliente, Importe)
	VALUES (@Cliente, @Importe);
	-- OPCIONALMENTE ME DEVUELVA EL IDENTIFICADOR DEL REGISTRO
	SELECT SCOPE_IDENTITY() AS IdFactura
	-- OPCIONALMENTE DEVOLVER EN LA VARIABLE
	RETURN SCOPE_IDENTITY()
END;
GO

-- UNA VEZ CREADO, LO VAMOS A EJECUTAR, PRIMERO DECLARO
-- LA VARIABLE PARA ALMACENAR EL IdFactura
DECLARE @NuevoIdFactura INT;
-- CON LA CLAUSULA EXEC
EXEC @NuevoIdFactura = spinsertarfactura
	@Cliente = 'Juan Perez',
	@Importe = 23000,
	@Numero = '';

SELECT @NuevoIdFactura AS IdUltimaFactura;

SELECT * FROM Facturas WHERE IdFactura = @NuevoIdFactura;
	
/** PRACTICA 1:
CREAR UN STORE PROCEDURE QUE INCREMENTE EL VALOR DEL 
IMPORTE DE LA TABLA FACTURAS SEGUN UNA VARIABLE, 
Y QUE LO EJECUTE EN FUNCIÓN DEL IdFactura INDICADO Y
DEL VALOR DEL IMPORTE A INCREMENTAR

EXEC spnombre
     @IdFactura = 5,
     @Incremento = 15

VER EL REGISTRO QUE SE HA MODIFICADO.	










